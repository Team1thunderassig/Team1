# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from VehicleDataReader/CANMessage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class CANMessage(genpy.Message):
  _md5sum = "507c66b05d36e581207104e7f7c9ea27"
  _type = "VehicleDataReader/CANMessage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 messageId
float64 vehicleSpeed
float64 engineSpeed
bool driverdoor_open
bool frontPassengerDoor_open
bool rearLeftDoor_open
bool rearRightDoor_open
time FrameTickCountSysReadTime

"""
  __slots__ = ['messageId','vehicleSpeed','engineSpeed','driverdoor_open','frontPassengerDoor_open','rearLeftDoor_open','rearRightDoor_open','FrameTickCountSysReadTime']
  _slot_types = ['uint32','float64','float64','bool','bool','bool','bool','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       messageId,vehicleSpeed,engineSpeed,driverdoor_open,frontPassengerDoor_open,rearLeftDoor_open,rearRightDoor_open,FrameTickCountSysReadTime

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CANMessage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.messageId is None:
        self.messageId = 0
      if self.vehicleSpeed is None:
        self.vehicleSpeed = 0.
      if self.engineSpeed is None:
        self.engineSpeed = 0.
      if self.driverdoor_open is None:
        self.driverdoor_open = False
      if self.frontPassengerDoor_open is None:
        self.frontPassengerDoor_open = False
      if self.rearLeftDoor_open is None:
        self.rearLeftDoor_open = False
      if self.rearRightDoor_open is None:
        self.rearRightDoor_open = False
      if self.FrameTickCountSysReadTime is None:
        self.FrameTickCountSysReadTime = genpy.Time()
    else:
      self.messageId = 0
      self.vehicleSpeed = 0.
      self.engineSpeed = 0.
      self.driverdoor_open = False
      self.frontPassengerDoor_open = False
      self.rearLeftDoor_open = False
      self.rearRightDoor_open = False
      self.FrameTickCountSysReadTime = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I2d4B2I().pack(_x.messageId, _x.vehicleSpeed, _x.engineSpeed, _x.driverdoor_open, _x.frontPassengerDoor_open, _x.rearLeftDoor_open, _x.rearRightDoor_open, _x.FrameTickCountSysReadTime.secs, _x.FrameTickCountSysReadTime.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.FrameTickCountSysReadTime is None:
        self.FrameTickCountSysReadTime = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.messageId, _x.vehicleSpeed, _x.engineSpeed, _x.driverdoor_open, _x.frontPassengerDoor_open, _x.rearLeftDoor_open, _x.rearRightDoor_open, _x.FrameTickCountSysReadTime.secs, _x.FrameTickCountSysReadTime.nsecs,) = _get_struct_I2d4B2I().unpack(str[start:end])
      self.driverdoor_open = bool(self.driverdoor_open)
      self.frontPassengerDoor_open = bool(self.frontPassengerDoor_open)
      self.rearLeftDoor_open = bool(self.rearLeftDoor_open)
      self.rearRightDoor_open = bool(self.rearRightDoor_open)
      self.FrameTickCountSysReadTime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I2d4B2I().pack(_x.messageId, _x.vehicleSpeed, _x.engineSpeed, _x.driverdoor_open, _x.frontPassengerDoor_open, _x.rearLeftDoor_open, _x.rearRightDoor_open, _x.FrameTickCountSysReadTime.secs, _x.FrameTickCountSysReadTime.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.FrameTickCountSysReadTime is None:
        self.FrameTickCountSysReadTime = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.messageId, _x.vehicleSpeed, _x.engineSpeed, _x.driverdoor_open, _x.frontPassengerDoor_open, _x.rearLeftDoor_open, _x.rearRightDoor_open, _x.FrameTickCountSysReadTime.secs, _x.FrameTickCountSysReadTime.nsecs,) = _get_struct_I2d4B2I().unpack(str[start:end])
      self.driverdoor_open = bool(self.driverdoor_open)
      self.frontPassengerDoor_open = bool(self.frontPassengerDoor_open)
      self.rearLeftDoor_open = bool(self.rearLeftDoor_open)
      self.rearRightDoor_open = bool(self.rearRightDoor_open)
      self.FrameTickCountSysReadTime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2d4B2I = None
def _get_struct_I2d4B2I():
    global _struct_I2d4B2I
    if _struct_I2d4B2I is None:
        _struct_I2d4B2I = struct.Struct("<I2d4B2I")
    return _struct_I2d4B2I
