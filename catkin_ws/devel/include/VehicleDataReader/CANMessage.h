// Generated by gencpp from file VehicleDataReader/CANMessage.msg
// DO NOT EDIT!


#ifndef VEHICLEDATAREADER_MESSAGE_CANMESSAGE_H
#define VEHICLEDATAREADER_MESSAGE_CANMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace VehicleDataReader
{
template <class ContainerAllocator>
struct CANMessage_
{
  typedef CANMessage_<ContainerAllocator> Type;

  CANMessage_()
    : messageId(0)
    , vehicleSpeed(0.0)
    , engineSpeed(0.0)
    , driverdoor_open(false)
    , frontPassengerDoor_open(false)
    , rearLeftDoor_open(false)
    , rearRightDoor_open(false)
    , FrameTickCountSysReadTime()  {
    }
  CANMessage_(const ContainerAllocator& _alloc)
    : messageId(0)
    , vehicleSpeed(0.0)
    , engineSpeed(0.0)
    , driverdoor_open(false)
    , frontPassengerDoor_open(false)
    , rearLeftDoor_open(false)
    , rearRightDoor_open(false)
    , FrameTickCountSysReadTime()  {
  (void)_alloc;
    }



   typedef uint32_t _messageId_type;
  _messageId_type messageId;

   typedef double _vehicleSpeed_type;
  _vehicleSpeed_type vehicleSpeed;

   typedef double _engineSpeed_type;
  _engineSpeed_type engineSpeed;

   typedef uint8_t _driverdoor_open_type;
  _driverdoor_open_type driverdoor_open;

   typedef uint8_t _frontPassengerDoor_open_type;
  _frontPassengerDoor_open_type frontPassengerDoor_open;

   typedef uint8_t _rearLeftDoor_open_type;
  _rearLeftDoor_open_type rearLeftDoor_open;

   typedef uint8_t _rearRightDoor_open_type;
  _rearRightDoor_open_type rearRightDoor_open;

   typedef ros::Time _FrameTickCountSysReadTime_type;
  _FrameTickCountSysReadTime_type FrameTickCountSysReadTime;





  typedef boost::shared_ptr< ::VehicleDataReader::CANMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::VehicleDataReader::CANMessage_<ContainerAllocator> const> ConstPtr;

}; // struct CANMessage_

typedef ::VehicleDataReader::CANMessage_<std::allocator<void> > CANMessage;

typedef boost::shared_ptr< ::VehicleDataReader::CANMessage > CANMessagePtr;
typedef boost::shared_ptr< ::VehicleDataReader::CANMessage const> CANMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::VehicleDataReader::CANMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::VehicleDataReader::CANMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace VehicleDataReader

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'VehicleDataReader': ['/home/pawan/catkin_ws/src/VehicleDataReader/msg', '/home/pawan/catkin_ws/src/VehicleDataReader/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::VehicleDataReader::CANMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::VehicleDataReader::CANMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::VehicleDataReader::CANMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::VehicleDataReader::CANMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::VehicleDataReader::CANMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::VehicleDataReader::CANMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::VehicleDataReader::CANMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "507c66b05d36e581207104e7f7c9ea27";
  }

  static const char* value(const ::VehicleDataReader::CANMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x507c66b05d36e581ULL;
  static const uint64_t static_value2 = 0x207104e7f7c9ea27ULL;
};

template<class ContainerAllocator>
struct DataType< ::VehicleDataReader::CANMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "VehicleDataReader/CANMessage";
  }

  static const char* value(const ::VehicleDataReader::CANMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::VehicleDataReader::CANMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 messageId\n\
float64 vehicleSpeed\n\
float64 engineSpeed\n\
bool driverdoor_open\n\
bool frontPassengerDoor_open\n\
bool rearLeftDoor_open\n\
bool rearRightDoor_open\n\
time FrameTickCountSysReadTime\n\
\n\
";
  }

  static const char* value(const ::VehicleDataReader::CANMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::VehicleDataReader::CANMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.messageId);
      stream.next(m.vehicleSpeed);
      stream.next(m.engineSpeed);
      stream.next(m.driverdoor_open);
      stream.next(m.frontPassengerDoor_open);
      stream.next(m.rearLeftDoor_open);
      stream.next(m.rearRightDoor_open);
      stream.next(m.FrameTickCountSysReadTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CANMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::VehicleDataReader::CANMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::VehicleDataReader::CANMessage_<ContainerAllocator>& v)
  {
    s << indent << "messageId: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.messageId);
    s << indent << "vehicleSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.vehicleSpeed);
    s << indent << "engineSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.engineSpeed);
    s << indent << "driverdoor_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.driverdoor_open);
    s << indent << "frontPassengerDoor_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frontPassengerDoor_open);
    s << indent << "rearLeftDoor_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rearLeftDoor_open);
    s << indent << "rearRightDoor_open: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rearRightDoor_open);
    s << indent << "FrameTickCountSysReadTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.FrameTickCountSysReadTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLEDATAREADER_MESSAGE_CANMESSAGE_H
